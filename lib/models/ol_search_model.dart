import 'package:equatable/equatable.dart';
import 'package:json_annotation/json_annotation.dart';
import 'ol_search_doc_model.dart';

part 'ol_search_model.g.dart';

/// This abstract class [OLSearchBase] is the underlying class
/// for valid and invalid data.
abstract class OLSearchBase extends Equatable {
  @override
  List<Object?> get props => [];

  const OLSearchBase();
}

/// This class [OLSearchError] is returned on any errors
/// querying the search api.
class OLSearchError extends OLSearchBase {
  /// This `message` explains the returned error
  static const message = "Error on returning valid Search Result Objects";

  @override
  List<Object?> get props => [message];

  @override
  bool? get stringify => false;

  const OLSearchError();

  @override
  String toString() {
    return 'Error: $message';
  }
}

@JsonSerializable()

/// This class [OLSearch] will be returned on having valid search results using
/// the API's Query function. All json based operations are autogenerated.
class OLSearch extends OLSearchBase {
  final int numFound;
  final bool numFoundExact;
  final String q;
  final List<OLSearchDoc> docs;

  // ignore pattern in json rendering
  @JsonKey(ignore: true)
  final String patterns;

  @override
  List<Object?> get props => [numFound, numFoundExact, q, patterns];

  const OLSearch({
    this.numFound = 0,
    this.numFoundExact = false,
    this.q = "",
    this.docs = const [],
    this.patterns = "",
  });

  /// [OLSearch.fromJson] crates an instance from json
  factory OLSearch.fromJson(Map<String, dynamic> json) {
    return _$OLSearchFromJson(json);
  }

  /// [toJson] creates a json representative of this class
  Map<String, dynamic> toJson() {
    return _$OLSearchToJson(this);
  }

  @override
  String toString() {
    return '\nSearch:\n  numFound:$numFound\n  numFoundExact:$numFoundExact\n  q:$q\n  numDocs:${docs.length}\n  patterns:$patterns';
  }
}
