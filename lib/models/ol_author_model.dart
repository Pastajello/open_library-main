import 'package:equatable/equatable.dart';
import 'package:json_annotation/json_annotation.dart';

part 'ol_author_model.g.dart';

/// This abstract class [OLAuthorBase] is the underlying class for
/// valid and invalid data.
abstract class OLAuthorBase extends Equatable {
  @override
  List<Object?> get props => [];

  const OLAuthorBase();
}

/// This class [OLAuthorError] is returned on any errors querying
/// calls returning authors rendered by [query].
class OLAuthorError extends OLAuthorBase {
  static const message = "Error on returning a valid Author Object";

  @override
  List<Object?> get props => [message];

  @override
  bool? get stringify => false;

  const OLAuthorError();

  @override
  String toString() {
    return 'Error: $message';
  }
}

@JsonSerializable()

/// This class [OLAuthor] will be returned as part of searches containing
/// book authors. All json based operations are autogenerated.
class OLAuthor extends OLAuthorBase {
  final String name;
  final String personal_name;

  @override
  List<Object?> get props => [name, personal_name];

  const OLAuthor({
    this.name = "",
    this.personal_name = "",
  });

  /// [OLAuthor.fromJson] crates an instance from json
  factory OLAuthor.fromJson(Map<String, dynamic> json) {
    return _$OLAuthorFromJson(json);
  }

  /// [toJson] creates a json representative of this class
  Map<String, dynamic> toJson() {
    return _$OLAuthorToJson(this);
  }

  @override
  String toString() {
    return '${name.isNotEmpty ? 'name:$name' : ''}${name.isNotEmpty && personal_name.isNotEmpty ? ' ' : ''}${personal_name.isNotEmpty ? 'personal_name:$personal_name' : ''}';
  }
}
